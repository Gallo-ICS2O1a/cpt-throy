walk_speed = 0
accelerate = .25
gravity = .5
velocity = 0
jump_height = 25

moveX = 0
moveY = 0
gravY = 0

key_state = []
for _ in range(233):
    key_state.append(False)

def setup():
    size(1200, 700)
    
def draw():
    background(255)
    global speed 
    global walk_speed
    global accelerate
    global gravity
    global velocity
    global moveX
    global moveY
    global gravY

    player = Player(300, 300)
    player.x += moveX
    player.y += moveY
    player.y += gravY
    player.update()
    player.display()
    print(player.velocity)
    
    platform1 = Platform(300, 600)
    platform1.display_p()
    


    
    player.collisionDetection(player.x, player.y, player.w, player.h, platform1.x, platform1.y, platform1.w, platform1.h)

    
    if key_state[37] or key_state[65]:
        walk_speed += accelerate
        moveX -= walk_speed             
    
    elif key_state[39] or key_state[68]:
        walk_speed += accelerate
        moveX += walk_speed
    
    if key_state[38] or key_state[87]:
        moveY -= jump_height
    
    if key_state[40] or key_state[83]:
        moveY += jump_height
        
    if walk_speed >=10:
        walk_speed = 10


def keyPressed():
    global key_state 
    global accelerate
    key_state[keyCode] = True
    
def keyReleased():
    global key_state
    global walk_speed
    key_state[keyCode] = False
    walk_speed = 0

class Player():
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.w = 40
        self.h = 40
        self.c = color(0, 255, 0)
        self.velocity = 0    
        self.gravity = .5

    def collisionDetection(self, x1, y1, w1, h1, x2, y2, w2, h2):
    
        if x1 + w1 >= y2 or x1 + w1 >= y2+ w2:
            self.c = color(255, 0, 0)
    
    def update(self):
        global gravY
        self.velocity += self.gravity
        gravY += self.velocity
                
        
    
    def display(self):
        fill(self.c)
        rect(self.x, self.y, self.w, self.h)

class Platform():
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.w= 60
        self.h = 60
    
    def display_p(self):
        fill(255, 0, 0)
        rect(self.x, self.y, self.w, self.h)
        

        
        
        
        

        
        
        
